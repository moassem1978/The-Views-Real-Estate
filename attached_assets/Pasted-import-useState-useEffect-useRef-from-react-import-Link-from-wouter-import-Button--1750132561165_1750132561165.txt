import { useState, useEffect, useRef } from "react";
import { Link } from "wouter";
import { Button } from "@/components/ui/button";
import { useQuery } from "@tanstack/react-query";
import { Property, Announcement } from "@/types";
import { formatDate, getResizedImageUrl } from "@/lib/utils";
import {
  ChevronLeft,
  ChevronRight,
  ArrowRight,
  Calendar,
  MapPin,
} from "lucide-react";

type HighlightItem = {
  id: number;
  type: "property" | "announcement";
  data: Property | Announcement;
};

export default function HighlightsCarousel() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isAutoPlaying, setIsAutoPlaying] = useState(true);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const { data: properties = [] } = useQuery<Property[]>({
    queryKey: ["/api/properties/highlighted"],
    staleTime: 1000 * 60 * 10,
  });

  const { data: announcements = [] } = useQuery<Announcement[]>({
    queryKey: ["/api/announcements/highlighted"],
    staleTime: 1000 * 60 * 10,
  });

  const highlights: HighlightItem[] = [
    ...properties.map((p) => ({ id: p.id, type: "property", data: p })),
    ...announcements.map((a) => ({ id: a.id, type: "announcement", data: a })),
  ];

  useEffect(() => {
    if (!isAutoPlaying || highlights.length <= 1) return;
    intervalRef.current = setInterval(() => {
      setCurrentIndex((prev) => (prev + 1) % highlights.length);
    }, 5000);
    return () => intervalRef.current && clearInterval(intervalRef.current);
  }, [isAutoPlaying, highlights.length]);

  const goToPrevious = () => {
    setCurrentIndex((prev) => (prev - 1 + highlights.length) % highlights.length);
  };

  const goToNext = () => {
    setCurrentIndex((prev) => (prev + 1) % highlights.length);
  };

  const goToSlide = (index: number) => {
    setCurrentIndex(index);
  };

  const handleMouseEnter = () => {
    setIsAutoPlaying(false);
    if (intervalRef.current) clearInterval(intervalRef.current);
  };

  const handleMouseLeave = () => {
    setIsAutoPlaying(true);
  };

  if (highlights.length === 0) return null;
  const currentItem = highlights[currentIndex];

  const imageUrl =
    currentItem.type === "property"
      ? (currentItem.data as Property).images?.[0]
        ? getResizedImageUrl((currentItem.data as Property).images[0], "large")
        : "/placeholder-property.svg"
      : getResizedImageUrl(
          (currentItem.data as Announcement).imageUrl || "",
          "large"
        ) || "/placeholder-announcement.svg";

  return (
    <section className="py-16 bg-white">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-serif font-bold text-gray-800 mb-4">
            Featured Highlights
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Discover our handpicked selection of premium properties and latest announcements
          </p>
        </div>

        <div
          className="relative max-w-6xl mx-auto"
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
        >
          {/* Arrows */}
          <button
            onClick={goToPrevious}
            className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white text-black rounded-full shadow p-2 z-10 hover:bg-[#B87333] hover:text-white transition"
          >
            <ChevronLeft className="w-6 h-6" />
          </button>
          <button
            onClick={goToNext}
            className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white text-black rounded-full shadow p-2 z-10 hover:bg-[#B87333] hover:text-white transition"
          >
            <ChevronRight className="w-6 h-6" />
          </button>

          {/* Slide */}
          <div className="relative overflow-hidden rounded-2xl shadow-2xl h-[500px] md:h-[600px]">
            <img
              src={imageUrl}
              alt="Highlight"
              className="w-full h-full object-cover"
              onError={(e) =>
                ((e.target as HTMLImageElement).src = "/placeholder-property.svg")
              }
            />

            {/* Content Overlay */}
            <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 via-transparent to-transparent p-6 text-white">
              {currentItem.type === "property" ? (
                <>
                  <h3 className="text-2xl font-bold">
                    {(currentItem.data as Property).title}
                  </h3>
                  <div className="flex items-center gap-2 mt-2 text-sm opacity-80">
                    <MapPin className="w-4 h-4" />
                    <span>{(currentItem.data as Property).location}</span>
                  </div>
                  <Link href={`/properties/${(currentItem.data as Property).id}`}>
                    <Button className="mt-4 bg-[#B87333] hover:bg-[#964B00] text-white">
                      View Details <ArrowRight className="ml-2 w-4 h-4" />
                    </Button>
                  </Link>
                </>
              ) : (
                <>
                  <h3 className="text-2xl font-bold">
                    {(currentItem.data as Announcement).title}
                  </h3>
                  <div className="flex items-center gap-2 mt-2 text-sm opacity-80">
                    <Calendar className="w-4 h-4" />
                    <span>{formatDate((currentItem.data as Announcement).date)}</span>
                  </div>
                </>
              )}
            </div>
          </div>

          {/* Dot Navigation */}
          <div className="flex justify-center mt-6 gap-2">
            {highlights.map((_, i) => (
              <button
                key={i}
                onClick={() => goToSlide(i)}
                className={`w-3 h-3 rounded-full transition ${
                  i === currentIndex ? "bg-[#B87333]" : "bg-gray-300"
                }`}
              />
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}