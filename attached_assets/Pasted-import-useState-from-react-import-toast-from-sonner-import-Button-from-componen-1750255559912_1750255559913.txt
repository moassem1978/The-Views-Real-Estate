import { useState } from 'react';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export default function PropertyForm() {
  const [images, setImages] = useState<File[]>([]);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    price: '',
    location: '',
    propertyType: '',
    bedrooms: '',
    bathrooms: '',
    area: '',
    listingType: 'Primary'
  });

  const locations = [
    'Cairo', 'Sheikh Zayed', 'North Coast', 'Red Sea', 'Dubai', 'London'
  ];

  const unitTypes = [
    'Apartment', 'Penthouse', 'Chalet', 'Townhouse', 'Twinhouse', 'Villa', 'Mansion', 'Office'
  ];

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      setImages([...images, ...Array.from(files)]);
    }
  };

  const handleImageDelete = (index: number) => {
    const confirmed = window.confirm("Are you sure you want to delete this image?");
    if (!confirmed) return;
    const updated = [...images];
    updated.splice(index, 1);
    setImages(updated);
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async () => {
    if (!formData.title || !formData.price || images.length === 0) {
      toast.error('Please fill in required fields and add at least one image');
      return;
    }

    try {
      const submitData = new FormData();
      Object.entries(formData).forEach(([key, value]) => {
        submitData.append(key, value);
      });
      images.forEach(img => submitData.append("images", img));

      const response = await fetch("/api/properties", {
        method: "POST",
        body: submitData,
        credentials: "include",
      });

      if (response.ok) {
        toast.success('Property added successfully!');
        setImages([]);
        setFormData({
          title: '',
          description: '',
          price: '',
          location: '',
          propertyType: '',
          bedrooms: '',
          bathrooms: '',
          area: '',
          listingType: 'Primary'
        });
      } else {
        toast.error('Failed to add property');
      }
    } catch (error) {
      toast.error('Error submitting property');
    }
  };

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="text-2xl font-bold text-amber-800">Add New Property</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="title">Property Title *</Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => handleInputChange('title', e.target.value)}
              placeholder="Enter property title"
            />
          </div>

          <div>
            <Label htmlFor="price">Price *</Label>
            <Input
              id="price"
              value={formData.price}
              onChange={(e) => handleInputChange('price', e.target.value)}
              placeholder="Enter price"
            />
          </div>

          <div>
            <Label htmlFor="location">Location *</Label>
            <Select onValueChange={(value) => handleInputChange('location', value)}>
              <SelectTrigger>
                <SelectValue placeholder="Select location" />
              </SelectTrigger>
              <SelectContent>
                {locations.map((loc) => (
                  <SelectItem key={loc} value={loc}>{loc}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="propertyType">Unit Type *</Label>
            <Select onValueChange={(value) => handleInputChange('propertyType', value)}>
              <SelectTrigger>
                <SelectValue placeholder="Select unit type" />
              </SelectTrigger>
              <SelectContent>
                {unitTypes.map((type) => (
                  <SelectItem key={type} value={type}>{type}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="bedrooms">Bedrooms</Label>
            <Input
              id="bedrooms"
              value={formData.bedrooms}
              onChange={(e) => handleInputChange('bedrooms', e.target.value)}
              placeholder="e.g. 3"
            />
          </div>

          <div>
            <Label htmlFor="bathrooms">Bathrooms</Label>
            <Input
              id="bathrooms"
              value={formData.bathrooms}
              onChange={(e) => handleInputChange('bathrooms', e.target.value)}
              placeholder="e.g. 2"
            />
          </div>

          <div>
            <Label htmlFor="area">Area (mÂ²)</Label>
            <Input
              id="area"
              value={formData.area}
              onChange={(e) => handleInputChange('area', e.target.value)}
              placeholder="e.g. 180"
            />
          </div>
        </div>

        <div>
          <Label htmlFor="description">Description</Label>
          <Textarea
            id="description"
            value={formData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            placeholder="Describe the property"
          />
        </div>

        <div>
          <Label htmlFor="images">Upload Images *</Label>
          <Input type="file" id="images" multiple onChange={handleImageUpload} />
          <div className="grid grid-cols-3 gap-3 mt-3">
            {images.map((img, index) => (
              <div key={index} className="relative group">
                <img
                  src={URL.createObjectURL(img)}
                  alt={`preview-${index}`}
                  className="rounded-lg object-cover h-32 w-full"
                />
                <button
                  onClick={() => handleImageDelete(index)}
                  className="absolute top-1 right-1 bg-red-600 text-white text-xs px-2 py-1 rounded hidden group-hover:block"
                >
                  Delete
                </button>
              </div>
            ))}
          </div>
        </div>

        <div className="pt-4">
          <Button onClick={handleSubmit}>Submit Property</Button>
        </div>
      </CardContent>
    </Card>
  );
}