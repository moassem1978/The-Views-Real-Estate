import express from 'express';
import { updatePropertyInDB, getPropertyById, backupProperty } from '../lib/propertyService';
import multer from 'multer';
import sharp from 'sharp';
import { v4 as uuidv4 } from 'uuid';
import path from 'path';
import fs from 'fs';

const router = express.Router();
const upload = multer({ dest: 'uploads/' }); // or use memoryStorage

router.patch('/properties/:id', upload.array('images', 10), async (req, res) => {
  const propertyId = req.params.id;

  try {
    // ✅ Step 1: Backup original property before updating
    const originalProperty = await getPropertyById(propertyId);
    await backupProperty(propertyId, originalProperty);

    // ✅ Step 2: Validate input fields (title, price, etc.)
    const { title, price, description } = req.body;
    if (!title || !price) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // ✅ Step 3: Process uploaded images (if any)
    const processedImagePaths: string[] = [];

    if (req.files && Array.isArray(req.files)) {
      for (const file of req.files) {
        try {
          const imageId = uuidv4();
          const newFilename = `${imageId}.webp`;
          const outputPath = path.join(__dirname, '../../public/images', newFilename);

          await sharp(file.path)
            .resize({ width: 1200 })
            .toFormat('webp')
            .toFile(outputPath);

          processedImagePaths.push(`/images/${newFilename}`);
          fs.unlinkSync(file.path); // delete temp file
        } catch (imgErr) {
          console.warn(`Failed to process image ${file.originalname}:`, imgErr.message);
        }
      }
    }

    // ✅ Step 4: Update the listing in DB
    const updated = await updatePropertyInDB(propertyId, {
      title,
      price,
      description,
      images: processedImagePaths.length > 0 ? processedImagePaths : originalProperty.images,
    });

    return res.status(200).json({ message: 'Property updated', updated });
  } catch (err) {
    console.error('Property update failed:', err.message);
    return res.status(500).json({
      error: 'Server error during property update',
      detail: err.message,
    });
  }
});