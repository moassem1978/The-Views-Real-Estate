// components/ListingEditor.tsx
import React, { useState } from "react";

interface ListingProps {
  id: number;
  title: string;
  description: string;
  price: number;
  photos: string[]; // ['168688-photo1.webp', 'photo2.webp']
}

const ListingEditor = ({ listing }: { listing: ListingProps }) => {
  const [formData, setFormData] = useState({
    title: listing.title,
    description: listing.description,
    price: listing.price,
    newPhotos: [] as File[],
  });

  const [existingPhotos, setExistingPhotos] = useState<string[]>(listing.photos);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setFormData(prev => ({
        ...prev,
        newPhotos: Array.from(e.target.files),
      }));
    }
  };

  const handleRemovePhoto = (photoToRemove: string) => {
    setExistingPhotos(prev => prev.filter(p => p !== photoToRemove));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const payload = new FormData();
    payload.append("title", formData.title);
    payload.append("description", formData.description);
    payload.append("price", formData.price.toString());
    payload.append("existingPhotos", JSON.stringify(existingPhotos)); // Keep track of what to preserve

    formData.newPhotos.forEach((file, idx) => {
      payload.append("photos", file); // Same multer field name
    });

    const res = await fetch(`/api/edit-listing/${listing.id}`, {
      method: "POST",
      body: payload,
    });

    const result = await res.json();
    if (result.success) {
      alert("Listing updated successfully!");
    } else {
      alert("Error updating listing.");
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={formData.title}
        onChange={e => setFormData({ ...formData, title: e.target.value })}
        placeholder="Title"
      />
      <textarea
        value={formData.description}
        onChange={e => setFormData({ ...formData, description: e.target.value })}
        placeholder="Description"
      />
      <input
        type="number"
        value={formData.price}
        onChange={e => setFormData({ ...formData, price: parseFloat(e.target.value) })}
        placeholder="Price"
      />

      <div>
        <h4>Existing Photos:</h4>
        {existingPhotos.map(photo => (
          <div key={photo} style={{ marginBottom: "10px" }}>
            <img src={`/images/${photo}`} alt={photo} style={{ width: 150 }} />
            <button type="button" onClick={() => handleRemovePhoto(photo)}>Remove</button>
          </div>
        ))}
      </div>

      <div>
        <h4>Add New Photos:</h4>
        <input type="file" multiple accept="image/*" onChange={handleFileChange} />
      </div>

      <button type="submit">Save Listing</button>
    </form>
  );
};

export default ListingEditor;